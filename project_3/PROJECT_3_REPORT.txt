PROJECT 3 REPORT

 
Λιλίτσης Ιορδάνης 2867 liordanis@uth.gr
Ξωχέλλη Ελένη 2761 xeleni@uth.gr
Σαπουντζή Αθανασία Δέσποινα 2624 asapountzi@uth.gr

Πραγματοποιήσαμε τις αλλαγές μας στις συναρτήσεις slob_page_alloc και slob_alloc του αρχείου slob.c που είχαν χρησιμοποιήσει First-Fit και Νext-Fit αντίστοιχα για την 
δέσμευση μνήμης. 
Αντικαταστήσαμε τους δύο αυτούς αλγορίθμους με Best-Fit. Πιο συγκεκριμένα:

    • slob_page_alloc: Διατρέχουμε όλα τα blocks της σελίδας και βρίσκουμε το μικρότερο δυνατό block που ικανοποιεί το request. Όταν βρεθεί, επιστρέφεται pointer στο 
    Best-Fit block, αλλιώς επιστρέφεται NULL. 
      
    • slob_alloc: Διατρέχουμε όλα τα pages σε μία από τις τρεις λίστες σελίδων ανάλογα με το μέγεθος του request. Ψάχνουμε μεταξύ των σελίδων τον ελάχιστο ελεύθερο χώρο 
    (ΜΙΝ) που ικανοποιεί το request μας και καλούμε την slob_page_alloc για όσες σελίδες έχουν αυτό, με την σειρά  που έχουν βρεθεί. Για να μπορέσουμε να επισκεφτούμε 
    αυτές τις σελίδες, χωρίς να διατρέξουμε όλη την λίστα, έχουμε κρατήσει τον pointer της πρώτης σελίδας με χώρο = ΜΙΝ και έναν counter που μετράει των αριθμό των 
    σελίδων με χώρο MIN. Σε περίπτωση αποτυχίας της slob_page_alloc επαναλαμβάνουμε την διαδικασία ψάχνοντας τον αμέσως επόμενο ελάχιστο ελεύθερο χώρο. Τέλος αν δεν 
    χωράει σε καμία σελίδα, κάνουμε αίτηση για νέα σελίδα.

Για την εναλλαγή μεταξύ Next-Fit/Best-Fit στην slob_alloc χρησιμοποιούμε το define BEST_FIT_PAGE.
Για την εναλλαγή μεταξύ First-Fit/Best-Fit στην slob_page_alloc χρησιμοποιούμε το define BEST_FIT.

Με την υλοποίηση του Best-Fit, μετά την εγκατάσταση παρατηρήσαμε ότι το λειτουργικό καθυστερούσε να “bootάρει” (50 λεπτά καθυστέρηση) και είχε κακή αποκρισιμότητα. 
Παρόλο που η διαχείριση της μνήμης αποδεικνύεται παρακάτω καλύτερη, η καθυστέρηση αυτή καθιστά την συγκεκριμένη υλοποίηση δύσχρηστη.

Αναφορικά με τα sytsem calls:

Κρατάμε σε δυο static global μεταβλητές την allocated memory και την free memory.
H  allocated memory ενημερώνεται στις συναρτήσεις slob_new_pages και slob_free_pages ενώ η free memory υπολογίζεται on demand από μία συνάρτηση που διατρέχει και τις 
τρεις λίστες. Για αυτή την υλοποίηση προσθέσαμε κώδικα στο slob.c και δύο πρότυπα συναρτήσεων στο linux/slab.h. Επίσης δημιουργήσαμε νέα system calls 
slob_get_total_alloc_mem και slob_get_total_free_mem για να μας επιστρέφουν αυτές τις δύο τιμές και τα system_calls my_kmalloc και my_kfree για τις κλήσεις της kmalloc 
και kfree.

Στατιστικά αποτελέσματα:

	Δημιουργήσαμε ενα απλό πρόγραμμα (μέσα στο directory space_and_stats/ και αρκεί ένα make για το compilation) που ελέγχει τις μεταβλητές allocated memory και free 
	memory πριν και μετά απο αιτήσεις για δέσμευση μνήμης. 



Τα στοιχεία παρουσιάζονται παρακάτω:




First-Fit/Next-Fit: (σε Bytes)
    • total_alloc_memory: 221286400  262283264  344203264
    • total_free_memory:      4730208      4734952      4737128

Best-Fit: (σε Bytes)
    • total_alloc_memory:  244051968  285638656  367800320 
    • total_free_memory:        3173608      3166918      3159982
      
Παρατηρούμε ότι σε σχετικά ίσες τιμές allocated memory, χρησιμοποιώντας best-fit έχουμε καλύτερη αξιοποίηση της μνήμης σε σχέση με τον first-fit/next-fit. Αυτό φαίνεται 
από την διαφορά στις μετρήσεις της μεταβλητής total_free_memory (δεσμευμένη αλλά αναξιοποίητη μνήμη). Η διαφορά αυτή οφείλεται στο λιγότερο fragmentation που 
παρουσιάζει ο αλγόριθμος best-fit σε σχέση με τον first-fit/next-fit. 